package controller.user;

import model.entity.Users;
import model.service.SchedulesService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;

@WebServlet(name = "DeleteAppointmentServlet", urlPatterns = {"/DeleteAppointmentServlet"})
public class DeleteAppointmentServlet extends HttpServlet {
    
    private SchedulesService scheduleService;
    
    @Override
    public void init() throws ServletException {
        super.init();
        scheduleService = new SchedulesService();
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        System.out.println("üîç DeleteAppointmentServlet called at " + LocalDateTime.now() + " +07");
        
        // Get the session without creating a new one
        HttpSession session = request.getSession(false);
        
        // Check if user is logged in and is a Receptionist
        Users user = (session != null) ? (Users) session.getAttribute("user") : null;
        if (user == null || !"receptionist".equalsIgnoreCase(user.getRole())) {
            System.err.println("‚ùå Unauthorized access attempt. User: " + 
                             (user != null ? user.getRole() : "null"));
            request.setAttribute("errorMessage", "You must be logged in as a receptionist to delete schedules.");
            request.getRequestDispatcher("/views/common/login.jsp").forward(request, response);
            return;
        }
        
        // ‚úÖ L·∫•y userID t·ª´ request ƒë·ªÉ redirect v·ªÅ ƒë√∫ng trang
        String userIdParam = request.getParameter("userId");
        if (userIdParam == null || userIdParam.trim().isEmpty()) {
            userIdParam = request.getParameter("userID"); // fallback
        }
        
        try {
            // ‚úÖ Log all parameters ƒë·ªÉ debug
            System.out.println("üìã All request parameters:");
            request.getParameterMap().forEach((key, values) -> {
                System.out.println("  " + key + " = " + String.join(", ", values));
            });
            
            // Retrieve slotId from request parameters
            String slotIdParam = request.getParameter("slotId");
            
            // ‚úÖ Fallback: n·∫øu kh√¥ng c√≥ slotId, th·ª≠ t√¨m index (compatibility)
            if (slotIdParam == null || slotIdParam.trim().isEmpty()) {
                slotIdParam = request.getParameter("index");
                System.out.println("‚ö†Ô∏è slotId not found, trying index parameter: " + slotIdParam);
            }
            
            if (slotIdParam == null || slotIdParam.trim().isEmpty()) {
                System.err.println("‚ùå Missing slotId parameter at " + LocalDateTime.now() + " +07");
                String redirectUrl = buildRedirectUrl(request, userIdParam, "Slot ID is required to delete schedule.");
                response.sendRedirect(redirectUrl);
                return;
            }
            
            int slotId;
            try {
                slotId = Integer.parseInt(slotIdParam.trim());
                if (slotId <= 0) {
                    throw new NumberFormatException("Slot ID must be a positive integer.");
                }
                System.out.println("‚úÖ Valid slotId parsed: " + slotId);
            } catch (NumberFormatException e) {
                System.err.println("‚ùå Invalid slotId format: " + slotIdParam + " at " + LocalDateTime.now() + " +07");
                String redirectUrl = buildRedirectUrl(request, userIdParam, "Invalid Slot ID format: " + slotIdParam);
                response.sendRedirect(redirectUrl);
                return;
            }
            
            // ‚úÖ Ki·ªÉm tra slot c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi x√≥a
            try {
                var scheduleToDelete = scheduleService.getScheduleById(slotId);
                if (scheduleToDelete == null) {
                    System.err.println("‚ùå Schedule not found for slotId: " + slotId + " at " + LocalDateTime.now() + " +07");
                    String redirectUrl = buildRedirectUrl(request, userIdParam, "Schedule slot not found with ID: " + slotId);
                    response.sendRedirect(redirectUrl);
                    return;
                }
                System.out.println("‚úÖ Schedule found for deletion: " + scheduleToDelete.getSlotId() + 
                                 " - User: " + scheduleToDelete.getUserId() + 
                                 " - Date: " + scheduleToDelete.getSlotDate());
                                 
                // ‚úÖ L·∫•y userId t·ª´ schedule n·∫øu kh√¥ng c√≥ trong request
                if (userIdParam == null || userIdParam.trim().isEmpty()) {
                    userIdParam = String.valueOf(scheduleToDelete.getUserId());
                    System.out.println("üîß Retrieved userId from schedule: " + userIdParam);
                }
            } catch (SQLException e) {
                System.err.println("‚ùå Error checking schedule existence: " + e.getMessage());
                String redirectUrl = buildRedirectUrl(request, userIdParam, "Error verifying schedule: " + e.getMessage());
                response.sendRedirect(redirectUrl);
                return;
            }
            
            // Call service to delete the schedule
            boolean deleted = scheduleService.deleteScheduleEmployee(slotId);
            
            if (deleted) {
                System.out.println("‚úÖ Schedule slot " + slotId + " deleted successfully at " + LocalDateTime.now() + " +07");
                
                // ‚úÖ Redirect v·ªÅ trang view schedule v·ªõi success message v√† userID
                String redirectUrl = buildRedirectUrl(request, userIdParam, "X√≥a l·ªãch l√†m vi·ªác th√†nh c√¥ng!");
                response.sendRedirect(redirectUrl);
            } else {
                System.err.println("‚ùå Failed to delete schedule slot " + slotId + " at " + LocalDateTime.now() + " +07");
                String redirectUrl = buildRedirectUrl(request, userIdParam, "Kh√¥ng th·ªÉ x√≥a l·ªãch l√†m vi·ªác. Vui l√≤ng th·ª≠ l·∫°i sau.");
                response.sendRedirect(redirectUrl);
            }
            
        } catch (SQLException e) {
            // ‚úÖ B·∫Øt t·∫•t c·∫£ l·ªói SQL v√† ki·ªÉm tra message c·ª• th·ªÉ
            System.err.println("‚ùå SQLException in DeleteAppointmentServlet at " + LocalDateTime.now() + " +07: " + e.getMessage());
            e.printStackTrace();
            
            String errorMessage;
            String sqlMessage = e.getMessage().toLowerCase();
            
            // Ki·ªÉm tra c√°c lo·∫°i l·ªói SQL ph·ªï bi·∫øn
            if (sqlMessage.contains("foreign key") || sqlMessage.contains("constraint") || 
                sqlMessage.contains("references") || sqlMessage.contains("violates") ||
                sqlMessage.contains("cannot delete") || sqlMessage.contains("integrity")) {
                errorMessage = "Kh√¥ng th·ªÉ x√≥a l·ªãch n√†y v√¨ ƒë√£ c√≥ b·ªánh nh√¢n ƒë·∫∑t l·ªãch h·∫πn.";
            } else if (sqlMessage.contains("deadlock")) {
                errorMessage = "H·ªá th·ªëng ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau.";
            } else {
                errorMessage = "C√≥ l·ªói x·∫£y ra khi x√≥a l·ªãch l√†m vi·ªác. Vui l√≤ng th·ª≠ l·∫°i sau.";
            }
            
            String redirectUrl = buildRedirectUrl(request, userIdParam, errorMessage);
            response.sendRedirect(redirectUrl);
            
        } catch (ClassNotFoundException e) {
            System.err.println("‚ùå ClassNotFoundException in DeleteAppointmentServlet at " + LocalDateTime.now() + " +07: " + e.getMessage());
            e.printStackTrace();
            String redirectUrl = buildRedirectUrl(request, userIdParam, "L·ªói h·ªá th·ªëng. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.");
            response.sendRedirect(redirectUrl);
        }
    }
    
    /**
     * ‚úÖ Helper method ƒë·ªÉ build redirect URL v·ªõi parameters
     */
    private String buildRedirectUrl(HttpServletRequest request, String userIdParam, String message) {
        StringBuilder url = new StringBuilder(request.getContextPath() + "/ViewScheduleDoctorNurse");
        
        boolean hasParams = false;
        
        // Th√™m userID parameter
        if (userIdParam != null && !userIdParam.trim().isEmpty()) {
            url.append("?userID=").append(userIdParam);
            hasParams = true;
        }
        
        // Th√™m message parameter
        if (message != null && !message.trim().isEmpty()) {
            if (hasParams) {
                url.append("&");
            } else {
                url.append("?");
            }
            
            try {
                // ‚úÖ URL encode message ƒë·ªÉ tr√°nh l·ªói v·ªõi k√Ω t·ª± ƒë·∫∑c bi·ªát
                String encodedMessage = java.net.URLEncoder.encode(message, "UTF-8");
                
                // Ph√¢n bi·ªát success v√† error message
                if (message.contains("th√†nh c√¥ng") || message.contains("successfully")) {
                    url.append("success=").append(encodedMessage);
                } else {
                    url.append("error=").append(encodedMessage);
                }
            } catch (Exception e) {
                System.err.println("‚ùå Error encoding message: " + e.getMessage());
                url.append("error=").append("Message encoding error");
            }
        }
        
        String finalUrl = url.toString();
        System.out.println("üîó Redirecting to: " + finalUrl);
        return finalUrl;
    }
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        // Redirect GET requests to prevent accidental deletions
        System.out.println("‚ö†Ô∏è GET request to DeleteAppointmentServlet redirected at " + LocalDateTime.now() + " +07");
        response.sendRedirect(request.getContextPath() + "/ViewScheduleDoctorNurse");
    }
}